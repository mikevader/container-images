name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - 'apps/**'
      - 'base/**'
  pull_request:
    paths:
      - 'apps/**'
      - 'base/**'

env:
  # How long to sleep before running the tests (gives the application time to start)
  GOSS_SLEEP: 30

# Detect which folders in project-root (which contain the containers) contain changes
jobs:
  changes:
    name: Get changes
    runs-on: ubuntu-latest
    outputs:
      matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: json
          filters: |
            changed:
              - added|modified:
                - 'apps/**'
                - 'base/**'
      - run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json
      - id: reduce
        run: |
          CONTAINERS=$(jq --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+/)(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.second_directory)") | unique' changes.json)
          echo "containers<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTAINERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  hadolint:
    name: Run hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.50.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          filter_mode: diff_context
          fail_on_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - hadolint
      - changes
    strategy:
      matrix: ${{ fromJson(needs.changes.outputs.matrix) }}
      fail-fast: false
    if: "!contains(github.event.head_commit.message, '[ci-skip]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Define if tests and push should be run against which versions/platforms
      - name: Prepare
        id: prep
        run: |
          BUILD_DATE=$(date --rfc-3339=seconds --utc)
          echo "build_date=${BUILD_DATE}" >> "$GITHUB_OUTPUT"
          if test -f "./apps/${{ matrix.container }}/Dockerfile"; then
            CATEGORY="apps"
          else
            CATEGORY="base"
          fi
          echo "category=${CATEGORY}" >> "$GITHUB_OUTPUT"
          VERSION=$(cat ./${CATEGORY}/${{ matrix.container }}/VERSION)
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          PLATFORM=$(cat ./${CATEGORY}/${{ matrix.container }}/PLATFORM)
          echo "platform=${PLATFORM}" >> "$GITHUB_OUTPUT"
          if test -f "./${CATEGORY}/${{ matrix.container }}/goss.yaml"; then
            echo "goss=true" >> "$GITHUB_OUTPUT"
          else
            echo "goss=false" >> "$GITHUB_OUTPUT"
          fi
          if [ "${{github.event_name}}" == "pull_request" ]; then
            echo "push=false" >> "$GITHUB_OUTPUT"
            echo "cache_from=type=gha" >> "$GITHUB_OUTPUT"
            echo "cache_to=" >> "$GITHUB_OUTPUT"
          else
            echo "push=true" >> "$GITHUB_OUTPUT"
            echo "cache_from=type=gha" >> "$GITHUB_OUTPUT"
            echo "cache_to=type=gha,mode=max" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: amd64,arm64

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install and configure Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:latest

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}
      #     restore-keys: |
      #       ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.container }}

      # Install the GOSS testing framework
      - name: Set up goss/dgoss
        uses: e1himself/goss-installation-action@v1.2.1
        if: ${{ steps.prep.outputs.goss == 'true' }}
        with:
          version: v0.3.16

      # Creates a local build to run tests on
      - name: Build and Load local test-container
        if: ${{ steps.prep.outputs.goss == 'true' }}
        uses: docker/build-push-action@v6
        with:
          build-args: VERSION=${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.build_date }}
          context: .
          file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
          load: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}

      # Run GOSS tests if included with the container
      - name: Run GOSS tests
        if: ${{ steps.prep.outputs.goss == 'true' }}
        env:
          GOSS_FILE: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/goss.yaml
        run: |
          dgoss run ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:test

      # Push if not a PR, otherwise just test the build process for all requested platforms
      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          build-args: VERSION=${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.build_date }}
          context: .
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ steps.prep.outputs.category }}/${{ matrix.container }}/Dockerfile
          push: ${{ steps.prep.outputs.push }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:rolling
            ghcr.io/${{ github.repository_owner }}/${{ matrix.container }}:v${{ steps.prep.outputs.version }}
          cache-from: ${{ steps.prep.outputs.cache_from }}
          cache-to: ${{ steps.prep.outputs.cache_to }}
